import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Load Data from 'data' folder
def load_data():
    file_path = 'data/hotel_customer_data.xlsx'
    data = pd.read_excel(file_path, sheet_name='Transactions')
    return data

# Churn Prediction Model
def train_churn_model(data):
    data['Churn'] = data['Churn'].apply(lambda x: 1 if x == 'Yes' else 0)
    X = data[['Total_Transactions', 'Total_Revenue', 'Subscription_Length_Months']]
    y = data['Churn']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LogisticRegression()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    return model, accuracy, X_test, y_test, y_pred

# Revenue Analysis
def revenue_dashboard(data):
    st.subheader('📊 Revenue Analysis')
    revenue_summary = data.groupby('Region')['Total_Revenue'].sum().reset_index()
    fig = px.bar(revenue_summary, x='Region', y='Total_Revenue', title='Revenue by Region', color='Total_Revenue')
    st.plotly_chart(fig)
    
    # Subscription Length Analysis
    st.subheader('⏳ Subscription Length Analysis')
    fig2 = px.histogram(data, x='Subscription_Length_Months', title='Subscription Length Distribution')
    st.plotly_chart(fig2)

# Churn Analysis
def churn_dashboard(data):
    st.subheader('⚡ Churn Analysis')
    churn_summary = data['Churn'].value_counts(normalize=True).reset_index()
    churn_summary.columns = ['Churn', 'proportion']
    fig = px.pie(churn_summary, names='Churn', values='proportion', title='Churn Distribution')
    st.plotly_chart(fig)

    # Churn by Region Heatmap
    st.subheader('🌍 Churn by Region')
    churn_region = pd.crosstab(data['Region'], data['Churn'], normalize='index') * 100
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.heatmap(churn_region, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5, ax=ax)
    st.pyplot(fig)

# Customer Segmentation
def customer_segmentation(data):
    st.subheader('🎯 Customer Segmentation')
    conditions = [
        data['Total_Revenue'] >= 4000,
        (data['Total_Revenue'] >= 2000) & (data['Total_Revenue'] < 4000),
        data['Total_Revenue'] < 2000
    ]
    categories = np.array(['High Value', 'Medium Value', 'Low Value'], dtype=object)
    data['Customer_Segment'] = np.select(conditions, categories, default='Unknown')

    segment_summary = data['Customer_Segment'].value_counts().reset_index()
    segment_summary.columns = ['Segment', 'Count']
    fig = px.pie(segment_summary, names='Segment', values='Count', title='Customer Segmentation')
    st.plotly_chart(fig)

# Model Performance
def model_performance(y_test, y_pred):
    st.subheader('🎯 Model Performance')
    st.text('Accuracy: {:.2f}%'.format(accuracy_score(y_test, y_pred) * 100))
    st.text('Confusion Matrix:')
    st.write(confusion_matrix(y_test, y_pred))
    st.text('Classification Report:')
    st.text(classification_report(y_test, y_pred))

# Main Application
st.title('📊 Customer Revenue & Churn Analysis Platform')

# Executive Summary
st.markdown('''
### 📚 Executive Summary
This application provides an in-depth analysis of hotel customer data, highlighting revenue trends, customer segmentation, and churn prediction. The report includes:

1. **Revenue Analysis:** Visualizes revenue generated across different regions.
2. **Churn Analysis:** Analyzes customer churn trends and predicts churn likelihood.
3. **Customer Segmentation:** Groups customers based on revenue contribution.
4. **Model Performance:** Evaluates the accuracy and effectiveness of the churn prediction model.

### 📊 Data Preview
Below is a preview of the data used for the analysis.
''')

# Show Data Preview
data = load_data()
st.write(data.head())

# Revenue Dashboard
st.markdown('''
### 📊 Revenue Analysis
**How this is calculated:**
The revenue dashboard aggregates total revenue generated by customers across different regions. 
Higher revenue regions highlight key markets for the hotel.
''')
revenue_dashboard(data)

# Churn Dashboard
st.markdown('''
### ⚡ Churn Analysis
**How this is calculated:**
Churn distribution shows the proportion of customers who have stopped using services.
Churn by region provides insights into areas with higher customer drop-off rates.
''')
churn_dashboard(data)

# Customer Segmentation
st.markdown('''
### 🎯 Customer Segmentation
**How this is calculated:**
Customers are segmented based on their total revenue:
- **High Value:** Revenue >= $4000
- **Medium Value:** Revenue between $2000 and $4000
- **Low Value:** Revenue < $2000

Segmentation helps identify high-value customers and create targeted marketing campaigns.
''')
customer_segmentation(data)

# Train Churn Model
model, accuracy, X_test, y_test, y_pred = train_churn_model(data)

# Model Performance
st.markdown('''
### 🎯 Model Performance
**How this is calculated:**
A logistic regression model is trained to predict customer churn based on historical data. 
Model performance is evaluated using accuracy, confusion matrix, and classification reports.
''')
model_performance(y_test, y_pred)

# Download Processed Data
def convert_df(df):
    return df.to_csv(index=False).encode('utf-8')

csv = convert_df(data)
st.download_button(label='📥 Download Processed Data',
                   data=csv,
                   file_name='processed_data.csv',
                   mime='text/csv')
